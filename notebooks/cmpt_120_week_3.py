# -*- coding: utf-8 -*-
"""CMPT 120 Week 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GPeKuJBsvlJvtY7f1Euuyw3oPyqoo6kP

# CMPT 120 Week 3

Two examples
"""

# e3_1

# 'and' is strict: stops at the first False
print(True and False)  # False
print(True and True)   # True

# 'or' is like a shortcut: stops at the first True
print(False or True)   # True
print(False or False)  # False

# 'and' comes first (has higher precedence than 'or')
print(True or False and False)  # True

# e3_2

# Example: Using the walrus operator with input and if
if (name := input("Enter your name: ")):
    print(f"Hello, {name}!")
else:
    print("You didn't enter a name.")

"""Threee practice questions"""

# q3_1
# What happens if user inputs S
print("What is your clothing size? (S/M/L)")
size = input()
if size == "S":
  print("We have shirts in small.")
if size == "M":
  print("We have pants in medium.")
elif size == "L":
  print("We only carry small and medium sizes.")
else:
  print("I don't know that size.")

# q3_2
burger = "basic"
if burger == "classic" or "deluxe":
  print("Guess you didn't order a basic burger!")

# q3_3
# # What would this output if a user inputs M?
print("Tell us what size drink you want.")
size = input()
print(size == "s" or size == "m" or size == "l")

"""Examples"""

# e3_3
# Ask user how it's going and make a comment

print("How's it going?")
reply = input()

if reply == "Good":
    print("I'm glad you're good!")
    print("What's something good that happened?")
    good_thing = input()
    print(good_thing.strip(".") + "? That's great.")

# e3_4

text = "   Hello, World!   "
stripped_text = text.strip()
print(stripped_text)  # Output: 'Hello, World!'

text = "zzzHello, World!zzz"
stripped_text = text.strip('z')
print(stripped_text)  # Output: 'Hello, World!'

text = ".z.z.z.Hello, World!.z.z.z."
stripped_text = text.strip('z.')
print(stripped_text)  # Output: 'Hello, World!'

text = ".z.z.z.Hello, World!.z.z.z."
stripped_text = text.strip('.z')
print(stripped_text)  # Output: 'Hello, World!'

# e3_5

text = "Hello, WORLD!"
lowercase_text = text.lower()

print(lowercase_text)

# e3_6

text = "Hello, WORLD!"
uppercase_text = text.upper()

print(uppercase_text)

# e3_7
text = "   Hello, World!   "

# Chaining strip, lower, and upper
processed_text = text.strip().lower().upper()

print(processed_text)

# e3_8

# === the in keyword ===
print("Enter year you were born")
year = input().strip(" ,.!")

pig_years = ['1935', '1947', '1959', '1971', '1983', '1995', '2007']

# Use the 'in' keyword to check for "inclusion"
if year in pig_years:
    print("You are a lucky pig!")
else:
    print("I only have pig years memorized right now :(")

# e3_9
# Strings vs Lists
# Define a string and a list of characters
string_example = "hello"
list_example = ['h', 'e', 'l', 'l', 'o']

# 1. Accessing elements (similar for both)
print(f"String element at index 1: {string_example[1]}")
print(f"List element at index 1: {list_example[1]}")

# 2. Slicing (works the same)
print(f"String slice (1:4): {string_example[1:4]}")
print(f"List slice (1:4): {list_example[1:4]}")

# 3. Concatenation (works differently)
string_concat = string_example + " world"
list_concat = list_example + [' ', 'w', 'o', 'r', 'l', 'd']
print(f"String concatenation: {string_concat}")
print(f"List concatenation: {list_concat}")

# 4. Mutation (lists are mutable, strings are not)
# This will throw an error because strings are immutable
try:
    string_example[0] = 'H'
except TypeError as e:
    print(f"String mutation error: {e}")

# Lists are mutable, so this will work
list_example[0] = 'H'
print(f"List after mutation: {list_example}")

# 5. Joining lists to form a string
joined_string = ''.join(list_example)
print(f"Joined list into string: {joined_string}")

# e3_10
# === Measuring things in Canada ===
print("I'll tell you about measurements in Canada")

measure = input(
    "What are you measuring (mass or volume)").lower().strip(".!")

if measure == "mass":
    is_weight = input("Is it your weight (yes or no)").lower()
    if is_weight == "yes":
        print("lbs")
    else:
        print("kg")

elif measure == "volume":
    # TODO: add this branch
    pass

# e3_11
# === Measuring things in Canada ===
print("I'll tell you about measurements in Canada")

measure = input(
    "What are you measuring (mass or volume)").lower().strip(".!")

if measure == "mass":
    is_weight = input("Is it your weight (yes or no)").lower()
    if is_weight == "yes":
        print("lbs")
    else:
        print("kg")

elif measure == "volume":
    is_cooking = input("Is it for cooking (yes or no)").lower()
    if is_cooking == "yes":
        print("cups and spoons")
    else:
        print("liters and milliliters (metric)")

# e3_12
item1 = "laksa"
item2 = "chicken rice"
item3 = "mee siam"
item4 = "sushi deluxe"
item5 = "sushi supreme"

# we don't want to do
# print, print, print, print, print

items = [item1, item2, item3, item4, item5]

for item in items:
    print(item)

# e3_13
# Define the items with cuisine prefixes
item1 = "(sg) laksa"
item2 = "(sg) chicken rice"
item3 = "(sg) mee siam"
item4 = "(jp) sushi deluxe"
item5 = "(jp) sushi supreme"

# Put the items into a list
items = [item1, item2, item3, item4, item5]

# Ask the user for a cuisine type (sg or jp)
cuisine_type = input("Enter cuisine type (sg for Singapore, jp for Japan): ").lower()

# Filter and print items based on the cuisine type
print(f"Items for {cuisine_type.upper()} cuisine:")
for item in items:
    if item.startswith(f"({cuisine_type})"): # (or items[0:4])
        print(item)

# e3_14
print(item1.startswith("(sg)"))
print(item1[0:4])
print(item1[:4])

# e3_14
for num in range(0,10):
  print(num)

# e3_14
print('0,3')
for num in range(0,3):
  print('  ' , num)
print('0,4')
for num in range(0,4):
  print('  ' , num)
print('1,3')
for num in range(1,3):
  print('  ' , num)
print('1,4')
for num in range(1,4):
  print('  ' , num)

# List slicing examples - e3_15
my_list = ["a", "b", "c", "d"]

slices = [
    ("my_list[0:4]", my_list[0:4]),   # Whole list: start at 0, up to item 3 (inclusive)
    ("my_list[2:3]", my_list[2:3]),   # Skip 0, 1; include 2, stop before 3 (not inclusive)
    ("my_list[2:4]", my_list[2:4]),   # Skip 0, 1; include 2 and 3 (up to item 4)
    ("my_list[2:]", my_list[2:]),     # From index 2 to the end
    ("my_list[:2]", my_list[:2]),     # From start to index 2 (not inclusive)
    ("my_list[0:4:2]", my_list[0:4:2]), # Every 2nd element: start at 0, include 2
    ("my_list[-2:-1]", my_list[-2:-1]), # equivalent to my_list[2:3] 4-2=2, 4-1=3
    ("my_list[::-1]", my_list[::-1]), # Reverse the list
]

for code, result in slices:
    print(f"{code} => {result}")

start = 0
step = 1
stop = 4
my_list[start:stop:step]

# e3_16 f-string
name = "Alice"
age = 25
print(f"My name is {name} and I am {age} years old.")

# Q3_4

# what does this code print?

movies = ["Superman", "Frozen", "X-Men"]
  print("x-men" in movies)

# How might we "fix" it?

lower_movies = []
movies = ["Superman", "Frozen", "X-Men"]
for movie in movies:
  lower_movies.append(movie.lower())
print("x-men" in lower_movies)