# -*- coding: utf-8 -*-
"""CMPT 120 week 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TCu73m5c1YDYYEmpuN-8W_lAETkoJckJ
"""

# q4_1
# string_methods
print("!.?blah".strip("!.h").upper())

# q4_2
# string methods
foods = ["Burger", "Taco", "Tempura"]
print("Tempura".lower().upper() in foods)

# q4_3
# if/else, string concat, lists
pico = "pico"
paco = "paco"
poco = "poco"
if pico+paco in ["pico", "paco", "pocopoco"]:
    print("Hello")
else:
    print("Goodbye")

# q4_4
for i in ["0", "1", "2"]:
    print(i)

# q4_5
is_happy = False
response = input("How are you today?").lower()
if response in ['good', 'great', 'awesome']:
    is_happy = True
print(is_happy)

"""## Terminal tricks!

1.	Up/Down Arrows: Scroll through your command history.
2.	Tab Autocomplete: Start typing a command or file name, then press Tab to auto-complete it.
3.	Ctrl + C: Terminate the running process.
4.	Ctrl + A: Move to the beginning of the command line.
5.	Ctrl + E: Move to the end of the command line.
6.	Ctrl + R: Search through command history by typing a part of the command.
7.	!!: Re-run the last command.
8.	!n: Run the nth command from history (!5 runs the 5th command).
9.	Ctrl + U: Clear the current line.
10.	Ctrl + L: Clear the screen (similar to clear).
"""

# e4_1
# Bubble Tea Loop Examples
# Author: Angelica Lim. Updated by Nick Vincent, 2024.
# Date: Sep 23, 2024

# ---Here is the most basic way to print a menu. ---
print("***** Here is our menu using the old method.")
print("Mango milk")
print("~~~~~~~~~~~~")
print("Taro milk")
print("~~~~~~~~~~~~")
print("Matcha milk")
print("~~~~~~~~~~~~")
print("Oreo milk")
print("~~~~~~~~~~~~")
print("Papaya milk")
print("~~~~~~~~~~~~")
print("Chocolate milk")
print("~~~~~~~~~~~~")

# e4_2
# ---Here is a BETTER way that AVOIDS code duplication---
print("***** Here is our menu using a loop.")

# Make a list of flavours
flavours = ["Mango", "Taro", "Matcha", "Oreo", "Papaya", "Chocolate"]

# Go through each of the flavours and print it
for flavour in flavours:
    print(flavour + " milk")
    print("~~~~~~~~~~~~")

# e4_3
# Mind Reader Game
# Angelica Lim, updated Nick Vincent.
# Sep. 23, 2024
# This is a 3 round 2-player game. The 1st player reads a word, and secretly
# enters 3 words they associate with it. The 2nd player must then try to guess
# at least one of the words. If it's a match, they win!

import random

# Introduce the game and create word list
print("Welcome to Mind Reader!")
words = ["cat", "snow", "hot"]

# Do 3 rounds
for word in words:
    # Ask the first player to enter 3 words associated with a given word
    print("Player 1, enter 3 words you think of when I say '" + word + "'")

    # Get the 3 words from the user
    first_word = input("First word: ")
    second_word = input("Second word: ")
    third_word = input("Third word: ")

    # Clear the screen (placeholder, as actual screen clearing depends on system)

    # Ask the 2nd player to guess
    print("Player 2, what is one word you think Player 1 associates with '" + word + "'?")
    guess = input()

    # Check if they match and tell them if they win!
    if guess in [first_word, second_word, third_word]:
        print("You got it!")
    else:
        print("No match! They said '", first_word, "', '", second_word, "', and '", third_word, "'.")

# e4_4

# Weight Calculator
# Author: Angelica Lim, updated Nick Vincent
# Date: Sep 23, 2024

# Convert pounds to kilograms
pounds = float(input("Enter a weight in pounds? "))

# Output weight in kilograms
kg = pounds * 0.45

print("That's " + str(kg) + " kg.")

# e4_5
# type_conversions
# Integer to String
num = 10
num_str = str(num)  # '10'
print(num, num_str, type(num), type(num_str))

# String to Integer
str_num = "20"
str_to_int = int(str_num)  # 20
print(str_num, str_to_int, type(str_num), type(str_to_int))


# Integer to Float
int_num = 5
int_to_float = float(int_num)  # 5.0
print(int_num, int_to_float, type(int_num), type(int_to_float))

# Float to Integer
float_num = 9.7
float_to_int = int(float_num)  # 9 (truncated)
print(float_num, float_to_int, type(float_num), type(float_to_int))

# String to Float
str_float = "12.5"
str_to_float = float(str_float)  # 12.5
print(str_float, str_to_float, type(str_float), type(str_to_float))


# Float to String
float_to_str = str(float_num)  # '9.7'

# Boolean to Integer
bool_val = True
bool_to_int = int(bool_val)  # 1
print(bool_val, bool_to_int, type(bool_val), type(bool_to_int))

# Example of error handling during conversion
invalid_str = "abc"
try:
    invalid_to_int = int(invalid_str)  # Will raise ValueError
except ValueError:
    print(f"Cannot convert {invalid_str} to integer")

# e4_6
# Initialize counters for each cafe
starbucks_count = 0
renaissance_count = 0
tim_hortons_count = 0

# Ask 5 users for their favorite cafe
for i in range(5):
    cafe = input("What is your favorite cafe? (starbucks/renaissance/tim hortons): ").strip().lower()

    if cafe == 'starbucks':
        starbucks_count += 1
    elif cafe == 'renaissance':
        renaissance_count += 1
    elif cafe == 'tim hortons':
        tim_hortons_count += 1
    else:
        print("Invalid input, please try again.")

# Print out the results
print("\nResults:")
print(f"Starbucks: {starbucks_count}")
print(f"Renaissance: {renaissance_count}")
print(f"Tim Hortons: {tim_hortons_count}")

print("Starbucks: " + str(starbucks_count))
print("Renaissance: {renaissance_count}")
print("Tim Hortons: {tim_hortons_count}")

5 + "5" # > "TypeError: unsupported operand type(s) for +: 'int' and 'str'"
"5" + "5" # > all good!
str(5) + 5 # > also all good.

# e4_7
# Example of printing each number in a list using a for loop
numbers = [1, 2, 3, 4, 5]
for number in numbers:
    print(number)

# Manually printing each number without a for loop
numbers = [1, 2, 3, 4, 5]
print(numbers[0])
print(numbers[1])
print(numbers[2])
print(numbers[3])
print(numbers[4])

# e4_8
# preview of while loop
# Example of printing numbers from 1 to 5 using a while loop
count = 1
while count <= 5:
    print(count)
    count += 1

# e4_9
# nested for loop
# Example: Printing a multiplication table

# Using nested for loops to generate a multiplication table for numbers 1 through 5
print("Multiplication Table (1 to 5):")
for i in range(1, 6):  # Outer loop, iterating over numbers 1 to 5
    for j in range(1, 6):  # Inner loop, iterating over numbers 1 to 5 for each iteration of the outer loop
        print(i * j, end='\t')  # Multiply the numbers and print the result, followed by a tab
    print()  # Move to the next line after each row

# Explanation:
# For every iteration of the outer loop (i.e., for each value of 'i'),
# the inner loop runs completely, iterating over its own set of values (for each value of 'j').
# As a result, for each 'i', every possible 'j' value is paired with it once.

# e4_10
# Overview of string Formatting in Python

# Using Variables
name = "Alice"
age = 30

# 1. Using String Concatenation:
print("Method 1: String Concatenation")
print("Hello, " + name + "! You are " + str(age) + " years old.")
print("----------------------")

# 2. Using print() with Multiple Arguments:
print("Method 2: print() with Multiple Arguments")
print("Hello, ", name, "! You are ", age, " years old.", sep="")
print("----------------------")

# 3. Using %-formatting:
print("Method 3: %-formatting")
print("Hello, %s! You are %d years old." % (name, age))
print("----------------------")

# 4. Using str.format():
print("Method 4: str.format()")
print("Hello, {}! You are {} years old.".format(name, age))
# Named placeholders
print("Hello, {name}! You are {age} years old.".format(name=name, age=age))
# Indexing in placeholders
print("Hello, {1}! You are {0} years old.".format(age, name))
print("----------------------")

# 5. Using f-strings (formatted string literals)
print("Method 5: f-strings")
print(f"Hello, {name}! You are {age} years old.")
# Expressions inside f-string
print(f"{name}'s age next year will be {age + 1}.")
print("----------------------")

# 6. Using Template Strings:
from string import Template
print("Method 6: Template Strings")
template = Template("Hello, $name! You are $age years old.")
print(template.substitute(name=name, age=age))
print("----------------------")

# e4_11
# print details

# By default, print uses space (' ') to separate arguments
print("Hello", "World", "Python")

# Using a custom separator (e.g., '-')
print("Hello", "World", "Python", sep="-")

# By default, print adds a newline character at the end
print("Hello")
print("World")

# Using a custom end character (e.g., a space)
print("Hello", end=" ")
print("World")

# e4_12
# division

# True Division
# always returns a float, even if dividing two integers.
result = 5 / 2  # Output: 2.5
result = 4 / 2  # Output: 2.0 (float, not int)

# Floor division
# Performs division and rounds down (floors) the result to the nearest integer (or float if either operand is a float).
result = 5 // 2  # Output: 2 (int)
result = 5.0 // 2  # Output: 2.0 (float)

# Modulo / remainder
result = 5 % 2  # Output: 1
result = 10 % 3  # Output: 1

# e4_13 - All kinds of printing

# Hardcoded counts for each cafe
starbucks_count = 3
renaissance_count = 1
tim_hortons_count = 1

# Total count
total_count = starbucks_count + renaissance_count + tim_hortons_count

# Calculate percentages and fractions
starbucks_percent = (starbucks_count / total_count) * 100
renaissance_percent = (renaissance_count / total_count) * 100
tim_hortons_percent = (tim_hortons_count / total_count) * 100

# Print using string concatenation
print("\nResults (String Concatenation):")
print(
    "Starbucks: " + str(starbucks_count) + " (" + str(
        starbucks_percent) + "%, " + str(starbucks_count) + "/" + str(total_count) + ")"
)
print(
    "Renaissance: " + str(renaissance_count) + " (" + str(
        renaissance_percent) + "%, " + str(renaissance_count) + "/" + str(total_count) + ")"
)
print(
    "Tim Hortons: " + str(tim_hortons_count) + " (" + str
     (tim_hortons_percent) + "%, " + str(tim_hortons_count) + "/" + str(total_count) + ")"
)

# Print using string format
print("\nResults (String Format):")
print("Starbucks: {} ({:.2f}%, {}/{})".format(
    starbucks_count, starbucks_percent, starbucks_count, total_count
))
print("Renaissance: {} ({:.2f}%, {}/{})".format(
    renaissance_count, renaissance_percent, renaissance_count, total_count
))
print("Tim Hortons: {} ({:.2f}%, {}/{})".format(
    tim_hortons_count, tim_hortons_percent, tim_hortons_count, total_count
))

# Print using f-string
print("\nResults (F-String):")
print(
    f"Starbucks: {starbucks_count} ({starbucks_percent:.2f}%, {starbucks_count}/{total_count})"
)
print(
    f"Renaissance: {renaissance_count} ({renaissance_percent:.2f}%, {renaissance_count}/{total_count})"
  )
print(
    f"Tim Hortons: {tim_hortons_count} ({tim_hortons_percent:.2f}%, {tim_hortons_count}/{total_count})"
)

# hey user, memorize this: starbucks = 0, ren = 1, tims = 2
list_of_counts = [0,0,0,0,0,0]
names = ["starbucks", "ren", "tims", "blenz", "buying iced coffee from the nesters fridge", "new coffee shop"]

# Ask 5 users for their favorite cafe
for i in range(5):
    print(names)
    cafe = input("What is your favorite cafe?: ").strip().lower()

    for name_index in range(len(names)):
      if cafe == names[name_index]:
        list_of_counts[name_index] += 1
        break

for i in range(len(list_of_counts)):
    relevant_count = list_of_counts[i]
    relevant_name = names[i]
    print(
        f"{relevant_name}: {relevant_count}"
    )

x = {}
x["tim"] = 0
x["starbucks"] = 0

x["tims"] += 1

# LIVE FROM LECTURE

# example list of lists you can use
bball_stats = [
    ['LeBron James', 'LAL', 25.7],
    ['Scottie Barnes', 'TOR', 19.9],
    ['Jamal Murray', 'DEN', 21.2],
    ['Anthony Davis', 'LAL', 24.7],
    ['RJ Barret', 'TOR', 20.2],
    ['Kevin Durant', 'PHX', 27.3],
    ['Giannis Antetokounmpo', 'MIL', 29.9],
    ['Jayson Tatum', 'BOS', 26.4],
    ['Joel Embiid', 'PHI', 33.1],
    ['Stephen Curry', 'GSW', 29.4],
    ['Nikola Jokic', 'DEN', 24.5],
]

for row in bball_stats:
  print(f"name: {row[0]}, team: {row[1]}, ppg: {row[2]}")

another_example = [
    ["mozart", "classical", 1000],
    ["bach", "classical", 2000],
    ["taylor swift", "pop-country?", 10000],
]

another_another_example = [
    ["succession", "prestige dramedy", 4.7],
    ["breaking bad", "drama", 4.8],
]

